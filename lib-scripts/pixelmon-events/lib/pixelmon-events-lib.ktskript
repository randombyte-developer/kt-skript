typealias ForgeEvent = net.minecraftforge.fml.common.eventhandler.Event

val eventListeners = ForgeEvent::class.java.getDeclaredField("listeners").apply { isAccessible = true }.get(null) as ListenerList

val pixelmonBusId = EventBus::class.java.getDeclaredField("busID").apply { isAccessible = true }.get(Pixelmon.EVENT_BUS) as Int

fun <T : ForgeEvent> registerPixelmonListener(
  eventClass: Class<T>,
  priority: EventPriority = EventPriority.NORMAL,
  filterCanceled: Tristate = Tristate.FALSE,
  listener: (T) -> Unit
): IEventListener {
  val iEventListener = IEventListener { event ->

    val passedCancellationFilter = when {
      !event.isCancelable -> true
      filterCanceled == Tristate.UNDEFINED -> true
      filterCanceled == Tristate.FALSE && !event.isCanceled -> true
      filterCanceled == Tristate.TRUE && event.isCanceled -> true
      else -> false
    }

    if (passedCancellationFilter) {
      val passedEventClassFilter = when {
        eventClass.isAssignableFrom(event::class.java) -> true
        else -> false
      }

      if (passedEventClassFilter) {
        listener.invoke(event as T)
      }
    }
  }

  eventListeners.register(pixelmonBusId, priority, iEventListener)
  return iEventListener
}

// without generics, because lambdas don't support them; generic can be "re-enabled" through a function on the library-caller side
val registerPixelmonListenerLambda = { eventClass: Class<ForgeEvent>, priority: EventPriority, filterCanceled: Tristate, listener: (ForgeEvent) -> Unit ->
    registerPixelmonListener(eventClass, priority, filterCanceled, listener)
}

val libFunctions = mapOf(
  "registerPixelmonListener" to registerPixelmonListenerLambda,
  "unregisterPixelmonListener" to { listener: IEventListener ->
    eventListeners.unregister(pixelmonBusId, listener)
  }
)

libFunctions 
